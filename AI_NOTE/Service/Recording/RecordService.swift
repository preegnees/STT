//
//  RecordService.swift
//  AI_NOTE
//
//  Created by –†–∞–¥–º–∏—Ä on 04.09.2025.
//

import CoreData
import Foundation
import ScreenCaptureKit

class RecordService {
    private let container: NSPersistentContainer
    private let context: NSManagedObjectContext
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    private var sessionPaths: SessionPaths?
    private var transcriber: Transcriber?
    
    private var micRecorder: MicrophoneRecorder?
    private var micTranscriptionManager: TranscriptionManager?
    
    private var sysRecorder: SystemAudioRecorder?
    private var sysTranscriptionManager: TranscriptionManager?
    
    private var activeManagers = Set<String>()
    private var completedManagers = Set<String>()
    
    // ID –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –æ—Ç–∫–∞—Ç–∞
    private var recordingID: NSManagedObjectID?
    
    init(container: NSPersistentContainer) {
        self.container = container
        self.context = container.viewContext
    }
    
    public func startRecording(note: Note, settings: Settings) async throws {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
        guard sessionPaths == nil else {
            throw ServiceError.alreadyRunning
        }
                
        do {
            // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            try await ensureMicrophonePermission()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞—É–¥–∏–æ (macOS 13+)
            if #available(macOS 13.0, *) {
                try await ensureSystemAudioPermission()
            }
            
            // 2) –°–æ–∑–¥–∞–µ–º Whisper
            let transcriber = try await Transcriber(settings)
            self.transcriber = transcriber
            
            // 3) –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
            let paths = try SessionFS.makeSessionFolder()
            self.sessionPaths = paths
            
            // 4) –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            let (recordingID, micTranscript, sysTranscript) = try createDBRecords(for: note, basePath: paths.root.path)
            self.recordingID = recordingID
            
            // 5) –ü–∏—à–µ–º –≤ –ª–æ–≥
            print("‚Äî Recording started ‚Äî")
            
            // 6) –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º TranscriptionManager
            let micManager = TranscriptionManager(
                sessionDir: paths.mic,
                transcript: micTranscript,
                transcriber: transcriber,
                context: context,
                onComplete: { [weak self] in
                    Task { await self?.checkTranscriptionComplete(source: SourceName.mic.rawValue) }
                }
            )
            activeManagers.insert(SourceName.mic.rawValue)

            // System manager
            let sysManager = TranscriptionManager(
                sessionDir: paths.system,
                transcript: sysTranscript,
                transcriber: transcriber,
                context: context,
                onComplete: { [weak self] in
                    Task { await self?.checkTranscriptionComplete(source: SourceName.system.rawValue) }
                }
            )
            activeManagers.insert(SourceName.system.rawValue)

            self.micTranscriptionManager = micManager
            self.sysTranscriptionManager = sysManager
            
            Task.detached { await micManager.run() }
            Task.detached { await sysManager.run() }
            
            // 7) –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ä–µ–∫–æ—Ä–¥–µ—Ä
            let recorder = try MicrophoneRecorder(
                targetSampleRate: 16000,
                chunkSeconds: 10.0,
                onSegment: { url, idx in
                    Task { await micManager.enqueue(url: url, index: idx) }
                }
            )
            self.micRecorder = recorder
            try recorder.start(into: paths.mic)

            if #available(macOS 13.0, *) {
                let sysRecorder = try SystemAudioRecorder(
                    targetSampleRate: 16000,
                    chunkSeconds: 10.0,
                    onSegment: { url, idx in
                        Task { await sysManager.enqueue(url: url, index: idx) }
                    }
                )
                self.sysRecorder = sysRecorder
                try sysRecorder.start(into: paths.system)
            }
        } catch {
            // –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            // TODO –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≤—Ç—Ä–∞
            await rollbackOnError()
            throw error
        }
    }
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º –º–µ—Ç–æ–¥ stopRecording –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cleanupState:
    public func stopRecording() async throws {
        guard sessionPaths != nil else {
            throw ServiceError.notRunning
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Ä–µ–∫–æ—Ä–¥–µ—Ä
        micRecorder?.stop()
        
        if #available(macOS 13.0, *) {
            sysRecorder?.stop()
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        let now = Date()
        if let recordingID = recordingID,
           let recording = try? context.existingObject(with: recordingID) as? Recording {
            recording.endedAt = now
            if let start = recording.startedAt {
                recording.durationSec = now.timeIntervalSince(start)
            }
            recording.statusEnum = .processing
        }
        
        try context.save()
        
        print("‚Äî Recording stopped ‚Äî")
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        // –í–ê–ñ–ù–û: —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ –ù–ï —É–¥–∞–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ TranscriptionManager
        // –º–æ–∂–µ—Ç –µ—â–µ –¥–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Ñ–æ–Ω–µ
        cleanupState()
    }
    
    // MARK: - Private Methods
    
    private func createDBRecords(for note: Note, basePath: String) throws -> (NSManagedObjectID, MicTranscript, SystemTranscript) {
        let ctx = note.managedObjectContext ?? context

        // –û–¥–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        let recording = Recording(context: ctx)
        recording.id = UUID()
        recording.startedAt = Date()
        recording.statusEnum = .recording
        recording.basePath = basePath
        recording.note = note

        let micTranscript = MicTranscript(context: ctx)
        micTranscript.id = UUID()
        micTranscript.fullText = ""
        micTranscript.createdAt = Date()
        micTranscript.updatedAt = Date()
        recording.micTranscript = micTranscript

        let sysTranscript = SystemTranscript(context: ctx)
        sysTranscript.id = UUID()
        sysTranscript.fullText = ""
        sysTranscript.createdAt = Date()
        sysTranscript.updatedAt = Date()
        recording.systemTranscript = sysTranscript

        // –ü–æ–º–µ—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ
        note.summaryStatusEnum = .pending
        note.summaryUpdatedAt = nil

        try ctx.save()
        return (recording.objectID, micTranscript, sysTranscript)
    }
    
    // MARK: - Private Methods

    private func rollbackOnError() async {
        print("üîÑ Rolling back recording session...")
        
        // 1) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        micRecorder?.stop()
        
        if #available(macOS 13.0, *) {
            sysRecorder?.stop()
        }
        
        // 2) –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if let recordingID = recordingID {
            do {
                if let recording = try? context.existingObject(with: recordingID) as? Recording {
                    context.delete(recording)
                    try context.save()
                    print("üóëÔ∏è Database records rolled back")
                }
            } catch {
                print("‚ö†Ô∏è Failed to rollback database: \(error.localizedDescription)")
                context.rollback()
            }
        }
        
        // 3) –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏
        if let paths = sessionPaths {
            do {
                if FileManager.default.fileExists(atPath: paths.root.path) {
                    try FileManager.default.removeItem(at: paths.root)
                    print("üóëÔ∏è Session folder removed: \(paths.root.lastPathComponent)")
                }
            } catch {
                print("‚ö†Ô∏è Failed to remove session folder: \(error.localizedDescription)")
            }
        }
        
        // 4) –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cleanupState()
        print("‚úÖ Recording service state cleaned up")
    }

    private func cleanupState() {
        micRecorder = nil
        sysRecorder = nil
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TranscriptionManager'—ã
        Task { await micTranscriptionManager?.stop() }
        Task { await sysTranscriptionManager?.stop() }
        
        micTranscriptionManager = nil
        sysTranscriptionManager = nil
        transcriber = nil
        sessionPaths = nil
        recordingID = nil
        
        completedManagers.removeAll()
        activeManagers.removeAll()
    }
    
    private func checkTranscriptionComplete(source: String) async {
        guard activeManagers.contains(source) else { return }
        
        completedManagers.insert(source)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤—Å–µ –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        if completedManagers == activeManagers {
            await markRecordingComplete()
            completedManagers.removeAll()
            activeManagers.removeAll()
        }
    }

    private func markRecordingComplete() async {
        guard let recordingID = recordingID,
              let recording = try? context.existingObject(with: recordingID) as? Recording else { return }
        
        recording.statusEnum = .done
        try? context.save()
        print("‚úÖ Recording fully completed")
    }
}

// MARK: - Extensions

extension RecordService {
    enum ServiceError: LocalizedError {
        case alreadyRunning
        case notRunning
        case invalidNote
        case failedToCreateSessionFolder

        var errorDescription: String? {
            switch self {
            case .alreadyRunning: return "–ó–∞–ø–∏—Å—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞."
            case .notRunning: return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏."
            case .invalidNote: return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É/–∑–∞–ø–∏—Å—å."
            case .failedToCreateSessionFolder: return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–∏."
            }
        }
    }
}
